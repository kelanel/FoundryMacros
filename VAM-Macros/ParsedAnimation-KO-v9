//written by Kelanel 
//For usage with VAM(Vivid adeventure maps) animated tokens.
//Expecting a specific filename layout to use for character matching, animation searches, and frame counts for timecodes
//Example: VAM_MonkMMA_Attack2LegSweep_0122.webm
// "MonkMMA" is considered the character name and only files with this after the first underscore will be used by macro matching the currently assigned filename
// "Attack2LegSweep" is used by the search string below to filter what actions you like to select from. Be more specific to filter between specific files
// "0122" is the numbered frame count at the end of the filename and must be after the last underscore. This is expect to be running at 30fps and will be multiplied as such.
// All requirements must be filled above to work properly. The current image file will be updated with the animation for x time, then reverted to the original image.
//This works best with MidiQOL's Macro on action to tie to specific actions of actors. Make one macro per search parameter, otherwise this macro can be used on multiple chars



//adjust this to match the filtered animations tied to character image of selected tokens
let searchstart = "Idle"
let searchanim = "Death"
let searchstatic = "Dead"
let timeoutoffset = 0
//all other comments afterward are just descriptive for others to understand.
//
//simple function for delay timer.
const wait = async (ms) => new Promise((resolve)=> setTimeout(resolve, ms));

//cycle through and set default image per token
for(let nextToken of canvas.tokens.controlled) {
	try { //exception handling
			
		let originalimg = nextToken.document.getFlag("world", "originalimg"); //backup current image for later.
		if (!originalimg || originalimg === "") {
			originalimg = nextToken.data.img; //backup current image for later.
			console.log("flag not set for originalimg. Setting now to: " + originalimg);
			await nextToken.document.setFlag("world", "originalimg", originalimg ); //backup original image incase of undo.
		}
	} catch (err) { //ui catch
			ui.notifications.error(`Error processing ${nextToken.name}, ERROR: ${err}`);
			console.log(`Error processing ${nextToken.name}, ERROR: ${err}`);
	}
}
if(canvas.tokens.controlled.length == 1){
    //loop through all selected tokens.
    for(let nextToken of canvas.tokens.controlled) {
        (async () => {
			try { //exception handling
				let originalimg = nextToken.document.getFlag("world", "originalimg"); //backup current image for later.
    			
				let imgpath = originalimg.split("/");   //splitting to breakdown to just filename
				let imgname = imgpath[imgpath.length -1].split("_"); //final breakdown to use name for parsing parts.
				let charname = imgname[1]; //parsing Charactername
				console.log("Charactername found: " + charname);
				let AnimArray = []; //predeclare array to load up.
				let StaticArray = []; //predeclare array to load up.
				let response = await FilePicker.browse("data", originalimg); //query directory of current imagefile
				for(let imagefile of response.files) {  //parse files
					let fpath = imagefile.split("/");
					let fname = fpath[fpath.length - 1]; //scrape file name
					let search1 = fname.search(searchanim);
					let search2 = fname.search(charname);
					let search3 = fname.search(searchstatic)
					if (search1 >= 0 && search2 >= 0) { //charname and search name must match to continue
		
						console.log("Image found: " + fname);
						let sstring = fname.split("_"); //pull framecount
						let framecount = sstring[sstring.length - 1].split("-")[1]
						let parsedtimeout = parseFloat( framecount.split(".")[0]) //parse framecount into number
						if (isNaN(parsedtimeout)) {
							
							console.log("could not parse animation time due to missing time code!"); //failed to parse
				   
						} else { 
							console.log("Expected animation time: " + parsedtimeout * 33.33 + "ms");
							let ParsedAnim = {  //build successfully found animation and add to list of valid animations
							
								path: imagefile,
								timeout: (parsedtimeout * 33.33)
							};
							AnimArray.push(ParsedAnim);
						}
				
					}else if (search3 >= 0 && search2 >= 0) {
						console.log("Static Image found: " + fname);
						StaticArray.push(imagefile)
						
					}
				}
				if (AnimArray.length > 1 && StaticArray.length > 0) { //multiple animations, pick one randomly
					console.log("Multiple matches found, selecting a random animation");
					let imageChoice = Math.floor(Math.random() * AnimArray.length);
					let image = AnimArray[imageChoice];
					let finalimage = StaticArray[0] ;
					//console.log(image);
					console.log("Assigning randomized Animation Path: " + image.path );
					
					//await nextToken.document.setFlag("world", "originalimg", originalimg ); //backup original image incase of undo.
					await nextToken.document.update({ "img": image.path });
					//nextToken.refresh();
					console.log("Animation Assigned.. Waiting " + image.timeout + " ms");
					await wait((image.timeout + timeoutoffset));
					console.log("Animation complete, Assigning new static Path: " + finalimage );
					await nextToken.document.update({ "img": finalimage });
					//nextToken.refresh();
					
				} else if (AnimArray.length == 1 && StaticArray.length > 0) { // single animation found, no randomization
				
					
					let imageChoice = 0;
					let image = AnimArray[imageChoice];
					let finalimage = StaticArray[0]
					//console.log(image);
					console.log("Single match found. Assigning Animation Path:" + image.path );
					//await nextToken.setFlag("world", "originalimg", originalimg ); //backup original image incase of undo.
					await nextToken.document.update({ "img": AnimArray[imageChoice].path })
					//nextToken.refresh();
					console.log("Animation Assigned.. Waiting " + (image.timeout + timeoutoffset) + " ms");
					await wait((image.timeout + timeoutoffset));
					console.log("Animation complete, Assigning new static Path: " + finalimage );
					await nextToken.document.update({ "img": finalimage });
					//nextToken.refresh();
				} else if (AnimArray.length == 0 && StaticArray.length > 0) { // single animation found, no randomization
				
					
					
					let finalimage = StaticArray[0]
					//console.log(image);
					//await nextToken.setFlag("world", "originalimg", originalimg ); //backup original image incase of undo.
					console.log("No Animation found, Assigning new static Path: " + finalimage );
					await nextToken.document.update({ "img": finalimage });
					//nextToken.refresh();
				} else { //no animation + static picture combo found
					console.log("No matching image combinations found for " + nextToken.name +", skipping.");
				}
			} catch (err) { //ui catch
					ui.notifications.error(`Error processing ${nextToken.name}, ERROR: ${err}`);
					console.log(`Error processing ${nextToken.name}, ERROR: ${err}`);
			}
			//end of loop. next token
		})();
    }
}else {//multiple targets, using static only.
     (async () => {
                   for(let nextToken of canvas.tokens.controlled) {
        
			try { //exception handling
				let originalimg = nextToken.document.getFlag("world", "originalimg"); //backup current image for later.
    			
				let imgpath = originalimg.split("/");   //splitting to breakdown to just filename
				let imgname = imgpath[imgpath.length -1].split("_"); //final breakdown to use name for parsing parts.
				let charname = imgname[1]; //parsing Charactername
				console.log("Charactername found: " + charname);
				let AnimArray = []; //predeclare array to load up.
				let StaticArray = []; //predeclare array to load up.
				let response = await FilePicker.browse("data", originalimg); //query directory of current imagefile
				for(let imagefile of response.files) {  //parse files
					let fpath = imagefile.split("/");
					let fname = fpath[fpath.length - 1]; //scrape file name
					//let search1 = fname.search(searchanim);
					let search2 = fname.search(charname);
					let search3 = fname.search(searchstatic)
					if (search3 >= 0 && search2 >= 0) {
						console.log("Static Image found: " + fname);
						StaticArray.push(imagefile);
						
					}
				}
				if ( StaticArray.length > 0) { // single animation found, no randomization
									
					let finalimage = StaticArray[0]
					console.log("Assigning new static Path: " + finalimage );
					await nextToken.document.update({ "img": finalimage });
					//nextToken.refresh();
				} else { //no animation + static picture combo found
					console.log("No matching image combinations found for " + nextToken.name +", skipping.");
				}
			} catch (err) { //ui catch
					ui.notifications.error(`Error processing ${nextToken.name}, ERROR: ${err}`);
					console.log(`Error processing ${nextToken.name}, ERROR: ${err}`);
			}
			//end of loop. next token
		
             }
    })();
}
